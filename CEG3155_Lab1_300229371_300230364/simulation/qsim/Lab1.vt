// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/06/2023 20:48:53"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    testLab
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module testLab_vlg_sample_tst(
	clock,
	leftInput,
	load,
	reset,
	rightInput,
	setgnd,
	shift,
	sampler_tx
);
input  clock;
input [7:0] leftInput;
input  load;
input  reset;
input [7:0] rightInput;
input [7:0] setgnd;
input  shift;
output sampler_tx;

reg sample;
time current_time;
always @(clock or leftInput or load or reset or rightInput or setgnd or shift)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module testLab_vlg_check_tst (
	outAR,
	outputLeft,
	outputMulti,
	outputRightt,
	sampler_rx
);
input  outAR;
input [7:0] outputLeft;
input [7:0] outputMulti;
input [7:0] outputRightt;
input sampler_rx;

reg  outAR_expected;
reg [7:0] outputLeft_expected;
reg [7:0] outputMulti_expected;
reg [7:0] outputRightt_expected;

reg  outAR_prev;
reg [7:0] outputLeft_prev;
reg [7:0] outputMulti_prev;
reg [7:0] outputRightt_prev;

reg  outAR_expected_prev;
reg [7:0] outputLeft_expected_prev;
reg [7:0] outputMulti_expected_prev;
reg [7:0] outputRightt_expected_prev;

reg  last_outAR_exp;
reg [7:0] last_outputLeft_exp;
reg [7:0] last_outputMulti_exp;
reg [7:0] last_outputRightt_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	outAR_prev = outAR;
	outputLeft_prev = outputLeft;
	outputMulti_prev = outputMulti;
	outputRightt_prev = outputRightt;
end

// update expected /o prevs

always @(trigger)
begin
	outAR_expected_prev = outAR_expected;
	outputLeft_expected_prev = outputLeft_expected;
	outputMulti_expected_prev = outputMulti_expected;
	outputRightt_expected_prev = outputRightt_expected;
end



// expected outAR
initial
begin
	outAR_expected = 1'bX;
end 
// expected outputLeft[ 7 ]
initial
begin
	outputLeft_expected[7] = 1'bX;
end 
// expected outputLeft[ 6 ]
initial
begin
	outputLeft_expected[6] = 1'bX;
end 
// expected outputLeft[ 5 ]
initial
begin
	outputLeft_expected[5] = 1'bX;
end 
// expected outputLeft[ 4 ]
initial
begin
	outputLeft_expected[4] = 1'bX;
end 
// expected outputLeft[ 3 ]
initial
begin
	outputLeft_expected[3] = 1'bX;
end 
// expected outputLeft[ 2 ]
initial
begin
	outputLeft_expected[2] = 1'bX;
end 
// expected outputLeft[ 1 ]
initial
begin
	outputLeft_expected[1] = 1'bX;
end 
// expected outputLeft[ 0 ]
initial
begin
	outputLeft_expected[0] = 1'bX;
end 
// expected outputMulti[ 7 ]
initial
begin
	outputMulti_expected[7] = 1'bX;
end 
// expected outputMulti[ 6 ]
initial
begin
	outputMulti_expected[6] = 1'bX;
end 
// expected outputMulti[ 5 ]
initial
begin
	outputMulti_expected[5] = 1'bX;
end 
// expected outputMulti[ 4 ]
initial
begin
	outputMulti_expected[4] = 1'bX;
end 
// expected outputMulti[ 3 ]
initial
begin
	outputMulti_expected[3] = 1'bX;
end 
// expected outputMulti[ 2 ]
initial
begin
	outputMulti_expected[2] = 1'bX;
end 
// expected outputMulti[ 1 ]
initial
begin
	outputMulti_expected[1] = 1'bX;
end 
// expected outputMulti[ 0 ]
initial
begin
	outputMulti_expected[0] = 1'bX;
end 
// expected outputRightt[ 7 ]
initial
begin
	outputRightt_expected[7] = 1'bX;
end 
// expected outputRightt[ 6 ]
initial
begin
	outputRightt_expected[6] = 1'bX;
end 
// expected outputRightt[ 5 ]
initial
begin
	outputRightt_expected[5] = 1'bX;
end 
// expected outputRightt[ 4 ]
initial
begin
	outputRightt_expected[4] = 1'bX;
end 
// expected outputRightt[ 3 ]
initial
begin
	outputRightt_expected[3] = 1'bX;
end 
// expected outputRightt[ 2 ]
initial
begin
	outputRightt_expected[2] = 1'bX;
end 
// expected outputRightt[ 1 ]
initial
begin
	outputRightt_expected[1] = 1'bX;
end 
// expected outputRightt[ 0 ]
initial
begin
	outputRightt_expected[0] = 1'bX;
end 
// generate trigger
always @(outAR_expected or outAR or outputLeft_expected or outputLeft or outputMulti_expected or outputMulti or outputRightt_expected or outputRightt)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected outAR = %b | expected outputLeft = %b | expected outputMulti = %b | expected outputRightt = %b | ",outAR_expected_prev,outputLeft_expected_prev,outputMulti_expected_prev,outputRightt_expected_prev);
	$display("| real outAR = %b | real outputLeft = %b | real outputMulti = %b | real outputRightt = %b | ",outAR_prev,outputLeft_prev,outputMulti_prev,outputRightt_prev);
`endif
	if (
		( outAR_expected_prev !== 1'bx ) && ( outAR_prev !== outAR_expected_prev )
		&& ((outAR_expected_prev !== last_outAR_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outAR :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outAR_expected_prev);
		$display ("     Real value = %b", outAR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_outAR_exp = outAR_expected_prev;
	end
	if (
		( outputLeft_expected_prev[0] !== 1'bx ) && ( outputLeft_prev[0] !== outputLeft_expected_prev[0] )
		&& ((outputLeft_expected_prev[0] !== last_outputLeft_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[0] = outputLeft_expected_prev[0];
	end
	if (
		( outputLeft_expected_prev[1] !== 1'bx ) && ( outputLeft_prev[1] !== outputLeft_expected_prev[1] )
		&& ((outputLeft_expected_prev[1] !== last_outputLeft_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[1] = outputLeft_expected_prev[1];
	end
	if (
		( outputLeft_expected_prev[2] !== 1'bx ) && ( outputLeft_prev[2] !== outputLeft_expected_prev[2] )
		&& ((outputLeft_expected_prev[2] !== last_outputLeft_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[2] = outputLeft_expected_prev[2];
	end
	if (
		( outputLeft_expected_prev[3] !== 1'bx ) && ( outputLeft_prev[3] !== outputLeft_expected_prev[3] )
		&& ((outputLeft_expected_prev[3] !== last_outputLeft_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[3] = outputLeft_expected_prev[3];
	end
	if (
		( outputLeft_expected_prev[4] !== 1'bx ) && ( outputLeft_prev[4] !== outputLeft_expected_prev[4] )
		&& ((outputLeft_expected_prev[4] !== last_outputLeft_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[4] = outputLeft_expected_prev[4];
	end
	if (
		( outputLeft_expected_prev[5] !== 1'bx ) && ( outputLeft_prev[5] !== outputLeft_expected_prev[5] )
		&& ((outputLeft_expected_prev[5] !== last_outputLeft_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[5] = outputLeft_expected_prev[5];
	end
	if (
		( outputLeft_expected_prev[6] !== 1'bx ) && ( outputLeft_prev[6] !== outputLeft_expected_prev[6] )
		&& ((outputLeft_expected_prev[6] !== last_outputLeft_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[6] = outputLeft_expected_prev[6];
	end
	if (
		( outputLeft_expected_prev[7] !== 1'bx ) && ( outputLeft_prev[7] !== outputLeft_expected_prev[7] )
		&& ((outputLeft_expected_prev[7] !== last_outputLeft_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputLeft[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputLeft_expected_prev);
		$display ("     Real value = %b", outputLeft_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_outputLeft_exp[7] = outputLeft_expected_prev[7];
	end
	if (
		( outputMulti_expected_prev[0] !== 1'bx ) && ( outputMulti_prev[0] !== outputMulti_expected_prev[0] )
		&& ((outputMulti_expected_prev[0] !== last_outputMulti_exp[0]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[0] = outputMulti_expected_prev[0];
	end
	if (
		( outputMulti_expected_prev[1] !== 1'bx ) && ( outputMulti_prev[1] !== outputMulti_expected_prev[1] )
		&& ((outputMulti_expected_prev[1] !== last_outputMulti_exp[1]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[1] = outputMulti_expected_prev[1];
	end
	if (
		( outputMulti_expected_prev[2] !== 1'bx ) && ( outputMulti_prev[2] !== outputMulti_expected_prev[2] )
		&& ((outputMulti_expected_prev[2] !== last_outputMulti_exp[2]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[2] = outputMulti_expected_prev[2];
	end
	if (
		( outputMulti_expected_prev[3] !== 1'bx ) && ( outputMulti_prev[3] !== outputMulti_expected_prev[3] )
		&& ((outputMulti_expected_prev[3] !== last_outputMulti_exp[3]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[3] = outputMulti_expected_prev[3];
	end
	if (
		( outputMulti_expected_prev[4] !== 1'bx ) && ( outputMulti_prev[4] !== outputMulti_expected_prev[4] )
		&& ((outputMulti_expected_prev[4] !== last_outputMulti_exp[4]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[4] = outputMulti_expected_prev[4];
	end
	if (
		( outputMulti_expected_prev[5] !== 1'bx ) && ( outputMulti_prev[5] !== outputMulti_expected_prev[5] )
		&& ((outputMulti_expected_prev[5] !== last_outputMulti_exp[5]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[5] = outputMulti_expected_prev[5];
	end
	if (
		( outputMulti_expected_prev[6] !== 1'bx ) && ( outputMulti_prev[6] !== outputMulti_expected_prev[6] )
		&& ((outputMulti_expected_prev[6] !== last_outputMulti_exp[6]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[6] = outputMulti_expected_prev[6];
	end
	if (
		( outputMulti_expected_prev[7] !== 1'bx ) && ( outputMulti_prev[7] !== outputMulti_expected_prev[7] )
		&& ((outputMulti_expected_prev[7] !== last_outputMulti_exp[7]) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputMulti[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputMulti_expected_prev);
		$display ("     Real value = %b", outputMulti_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_outputMulti_exp[7] = outputMulti_expected_prev[7];
	end
	if (
		( outputRightt_expected_prev[0] !== 1'bx ) && ( outputRightt_prev[0] !== outputRightt_expected_prev[0] )
		&& ((outputRightt_expected_prev[0] !== last_outputRightt_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[0] = outputRightt_expected_prev[0];
	end
	if (
		( outputRightt_expected_prev[1] !== 1'bx ) && ( outputRightt_prev[1] !== outputRightt_expected_prev[1] )
		&& ((outputRightt_expected_prev[1] !== last_outputRightt_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[1] = outputRightt_expected_prev[1];
	end
	if (
		( outputRightt_expected_prev[2] !== 1'bx ) && ( outputRightt_prev[2] !== outputRightt_expected_prev[2] )
		&& ((outputRightt_expected_prev[2] !== last_outputRightt_exp[2]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[2] = outputRightt_expected_prev[2];
	end
	if (
		( outputRightt_expected_prev[3] !== 1'bx ) && ( outputRightt_prev[3] !== outputRightt_expected_prev[3] )
		&& ((outputRightt_expected_prev[3] !== last_outputRightt_exp[3]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[3] = outputRightt_expected_prev[3];
	end
	if (
		( outputRightt_expected_prev[4] !== 1'bx ) && ( outputRightt_prev[4] !== outputRightt_expected_prev[4] )
		&& ((outputRightt_expected_prev[4] !== last_outputRightt_exp[4]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[4] = outputRightt_expected_prev[4];
	end
	if (
		( outputRightt_expected_prev[5] !== 1'bx ) && ( outputRightt_prev[5] !== outputRightt_expected_prev[5] )
		&& ((outputRightt_expected_prev[5] !== last_outputRightt_exp[5]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[5] = outputRightt_expected_prev[5];
	end
	if (
		( outputRightt_expected_prev[6] !== 1'bx ) && ( outputRightt_prev[6] !== outputRightt_expected_prev[6] )
		&& ((outputRightt_expected_prev[6] !== last_outputRightt_exp[6]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[6] = outputRightt_expected_prev[6];
	end
	if (
		( outputRightt_expected_prev[7] !== 1'bx ) && ( outputRightt_prev[7] !== outputRightt_expected_prev[7] )
		&& ((outputRightt_expected_prev[7] !== last_outputRightt_exp[7]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port outputRightt[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", outputRightt_expected_prev);
		$display ("     Real value = %b", outputRightt_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_outputRightt_exp[7] = outputRightt_expected_prev[7];
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module testLab_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clock;
reg [7:0] leftInput;
reg load;
reg reset;
reg [7:0] rightInput;
reg [7:0] setgnd;
reg shift;
// wires                                               
wire outAR;
wire [7:0] outputLeft;
wire [7:0] outputMulti;
wire [7:0] outputRightt;

wire sampler;                             

// assign statements (if any)                          
testLab i1 (
// port map - connection between master ports and signals/registers   
	.clock(clock),
	.leftInput(leftInput),
	.load(load),
	.outAR(outAR),
	.outputLeft(outputLeft),
	.outputMulti(outputMulti),
	.outputRightt(outputRightt),
	.reset(reset),
	.rightInput(rightInput),
	.setgnd(setgnd),
	.shift(shift)
);

// clock
always
begin
	clock = 1'b0;
	clock = #10000 1'b1;
	#10000;
end 
// leftInput[ 7 ]
initial
begin
	leftInput[7] = 1'b0;
end 
// leftInput[ 6 ]
initial
begin
	leftInput[6] = 1'b0;
end 
// leftInput[ 5 ]
initial
begin
	leftInput[5] = 1'b0;
end 
// leftInput[ 4 ]
initial
begin
	leftInput[4] = 1'b0;
end 
// leftInput[ 3 ]
initial
begin
	leftInput[3] = 1'b0;
end 
// leftInput[ 2 ]
initial
begin
	leftInput[2] = 1'b0;
end 
// leftInput[ 1 ]
initial
begin
	leftInput[1] = 1'b0;
end 
// leftInput[ 0 ]
initial
begin
	leftInput[0] = 1'b1;
end 

// load
initial
begin
	load = 1'b1;
	load = #60000 1'b0;
end 

// reset
initial
begin
	reset = 1'b0;
end 
// rightInput[ 7 ]
initial
begin
	rightInput[7] = 1'b1;
end 
// rightInput[ 6 ]
initial
begin
	rightInput[6] = 1'b0;
end 
// rightInput[ 5 ]
initial
begin
	rightInput[5] = 1'b0;
end 
// rightInput[ 4 ]
initial
begin
	rightInput[4] = 1'b0;
end 
// rightInput[ 3 ]
initial
begin
	rightInput[3] = 1'b0;
end 
// rightInput[ 2 ]
initial
begin
	rightInput[2] = 1'b0;
end 
// rightInput[ 1 ]
initial
begin
	rightInput[1] = 1'b0;
end 
// rightInput[ 0 ]
initial
begin
	rightInput[0] = 1'b0;
end 
// setgnd[ 7 ]
initial
begin
	setgnd[7] = 1'b0;
end 
// setgnd[ 6 ]
initial
begin
	setgnd[6] = 1'b0;
end 
// setgnd[ 5 ]
initial
begin
	setgnd[5] = 1'b0;
end 
// setgnd[ 4 ]
initial
begin
	setgnd[4] = 1'b0;
end 
// setgnd[ 3 ]
initial
begin
	setgnd[3] = 1'b0;
end 
// setgnd[ 2 ]
initial
begin
	setgnd[2] = 1'b0;
end 
// setgnd[ 1 ]
initial
begin
	setgnd[1] = 1'b0;
end 
// setgnd[ 0 ]
initial
begin
	setgnd[0] = 1'b0;
end 

// shift
initial
begin
	shift = 1'b0;
	shift = #140000 1'b1;
	shift = #840000 1'b0;
end 

testLab_vlg_sample_tst tb_sample (
	.clock(clock),
	.leftInput(leftInput),
	.load(load),
	.reset(reset),
	.rightInput(rightInput),
	.setgnd(setgnd),
	.shift(shift),
	.sampler_tx(sampler)
);

testLab_vlg_check_tst tb_out(
	.outAR(outAR),
	.outputLeft(outputLeft),
	.outputMulti(outputMulti),
	.outputRightt(outputRightt),
	.sampler_rx(sampler)
);
endmodule

